{
  "root": true,
  "ignorePatterns": ["projects/**/*"],
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/recommended--extra",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "plugins": ["deprecation", "unused-imports"],
      "settings": {
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true
          }
        }
      },
      "rules": {
        // linter rules/overrides
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/prefer-on-push-component-change-detection": "error",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": {
                "message": "Avoid using the `Object` type. Did you mean `object`?"
              },
              "Function": {
                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
              },
              "Boolean": {
                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
              },
              "Number": {
                "message": "Avoid using the `Number` type. Did you mean `number`?"
              },
              "String": {
                "message": "Avoid using the `String` type. Did you mean `string`?"
              },
              "Symbol": {
                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
              }
            }
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "private-field",
              "protected-field",
              "public-field",
              "constructor",
              "public-method",
              "protected-method",
              "private-method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": ["variable", "classProperty", "parameter"],
            "types": ["boolean"],
            "format": ["PascalCase"],
            "prefix": ["is", "was", "should", "has", "can", "did", "will", "enable", "disable"]
          },
          {
            "selector": ["property", "parameterProperty", "accessor"],
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": ["property", "parameterProperty", "accessor"],
            "modifiers": ["private", "readonly"],
            "format": ["UPPER_CASE"],
            "leadingUnderscore": "forbid"
          },
          {
            "selector": ["property"],
            "modifiers": ["readonly"],
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": ["objectLiteralProperty" /*interface*/, "typeProperty"],
            "format": ["camelCase", "snake_case"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": [
          "error",
          {
            "allowedNames": [
              "ngOnChanges",
              "ngOnInit",
              "ngDoCheck",
              "ngAfterContentInit",
              "ngAfterContentChecked",
              "ngAfterViewInit",
              "ngAfterViewChecked",
              "ngOnDestroy"
            ]
          }
        ],
        // should be "@typescript-eslint/explicit-function-return-type" + tsconfig "noImplicitAny",
        // but explicit-function-return-type doesn't have "allowedNames" option
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/default-param-last": "warn",
        "@typescript-eslint/no-empty-function": [
          "warn",
          {
            "allow": ["constructors"]
          }
        ],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        "@typescript-eslint/prefer-enum-initializers": "warn",
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ],
        "eqeqeq": [
          "error",
          "always",
          {
            "null": "ignore"
          }
        ],
        "object-shorthand": "error",
        "deprecation/deprecation": "warn",
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "warn",
        "unused-imports/no-unused-vars": "warn",
        // imports rules
        "import/no-useless-path-segments": "warn",
        "import/first": "warn",
        "import/newline-after-import": "warn",
        "import/order": [
          "warn",
          {
            "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
            "newlines-between": "never",
            "alphabetize": {
              "order": "asc"
            }
          }
        ],
        // formatter rules
        "arrow-body-style": "warn",
        "array-bracket-spacing": "warn",
        "arrow-parens": ["warn", "as-needed"],
        "computed-property-spacing": "warn",
        "curly": ["warn", "multi-line", "consistent"],
        "max-len": [
          "warn",
          {
            "code": 140
          }
        ],
        "new-parens": "warn",
        "no-multiple-empty-lines": [
          "warn",
          {
            "max": 1
          }
        ],
        "quote-props": ["warn", "as-needed"],
        "space-before-function-paren": [
          "warn",
          {
            "anonymous": "never",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "@typescript-eslint/array-type": "warn",
        "@typescript-eslint/brace-style": [
          "warn",
          "1tbs",
          {
            "allowSingleLine": true
          }
        ],
        "@typescript-eslint/comma-dangle": "warn",
        "@typescript-eslint/comma-spacing": "warn",
        "@typescript-eslint/func-call-spacing": "warn",
        "@typescript-eslint/keyword-spacing": "warn",
        "@typescript-eslint/lines-between-class-members": [
          "warn",
          "always",
          {
            "exceptAfterSingleLine": true
          }
        ],
        "@typescript-eslint/member-delimiter-style": "warn",
        "@typescript-eslint/object-curly-spacing": ["warn", "always"],
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",
        "@typescript-eslint/space-infix-ops": "warn",
        "quotes": "off",
        "@typescript-eslint/quotes": [
          "warn",
          "single",
          {
            "allowTemplateLiterals": true
          }
        ],
        "@typescript-eslint/semi": ["warn", "always"],
        "@typescript-eslint/type-annotation-spacing": "warn"
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    }
  ]
}
